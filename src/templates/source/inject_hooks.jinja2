{# Returns the name of the function we should take the address of #}
{%- macro real_function_name(fn) -%}
    {%- if fn.is_ctor -%}
        Constructor
    {%- elif fn.is_dtor -%}
        Destructor
    {%- elif fn.is_virtual and WRAP_VIRTUALS -%}
        {{ fn.name }}_Reversed
    {%- else -%}
        {{ fn.name }}
    {%- endif -%}
{%- endmacro -%}

{%- macro overloaded_cast_of(fn) -%}
    {{fn.ret_type}}({{ '*' if fn.is_static else class_name + '::'  }}*)({{ fn.param_types }})
{%- endmacro -%}

{%- macro install_of(fn) -%}
{# This way we can have half as much code #}
{%- set overloaded_str = 'Overloaded' if fn.is_overloaded else '' -%}
{%- if fn.is_static  -%}
    //RH_ScopedGlobal{{overloaded_str}}Install
{%- elif fn.is_virtual -%}
    //RH_Scoped{{overloaded_str}}VirtualInstall
{%- else -%}
    //RH_Scoped{{overloaded_str}}Install
{%- endif -%}
{%- endmacro -%}

{%- macro do_injects_for(list, name) -%}
{%- if list and list|length -%}
{% for fn in list %}
    {%- if fn.is_overloaded -%}
        {{install_of(fn)}}({{real_function_name(fn)}}, "", {{fn.address}}, {{overloaded_cast_of(fn)}});
    {% else -%}
        {{install_of(fn)}}({{real_function_name(fn)}}, {{fn.address}});
    {% endif -%}
{% endfor %}

{%- endif -%}
{%- endmacro -%}

void {{ class_name }}::InjectHooks() {
    RH_ScopedClass({{class_name}});
    RH_ScopedCategory(); // TODO: Change this to the appropriate category!

{{ do_injects_for(ctors, "Constructors") | indent(4) }}
{{ do_injects_for([dtor] if dtor else [], "Destructors") | indent(4) }}
{{ do_injects_for(static_fns, "Static functions") | indent(4) }}
{{ do_injects_for(methods, "Methods") | indent(4) }}
{{ do_injects_for(virtual_methods, "Virtual methods") | indent(4) }}
}
