{# Returns the name of the function we should take the address of #}
{%- macro raw_address_of(fn) -%}
    {%- if fn.is_ctor -%}
        &{{ class_name }}::Constructor
    {%- elif fn.is_dtor -%}
        &{{ class_name }}::Destructor
    {%- elif fn.is_virtual -%}
        &{{ class_name }}::{{ fn.name }}_Reversed
    {%- else -%}
        &{{ class_name }}::{{ fn.name }}
    {%- endif -%}
{%- endmacro -%}

{%- macro overloaded_address_of(fn) -%}
    static_cast<{{fn.ret_type}}({{ '*' if fn.is_static else class_name + '::'  }}*)({{ fn.param_types }})>({{ raw_address_of(fn) }})
{%- endmacro -%}

{%- macro address_of(fn) -%}
    {%- if fn.is_overloaded -%}
        {{ overloaded_address_of(fn) }}
    {%- else -%}
        {{ raw_address_of(fn) }}
    {%- endif -%}
{%- endmacro -%}

{%- macro do_injects_for(list, name) -%}
{%- if list -%}
// {{ name }}
{% for fn in list %}
    // ReversibleHooks::Install("{{ class_name }}", "{{ fn.name }}", {{ fn.address }}, {{ address_of(fn) }});
{% endfor %}

{%- endif -%}
{%- endmacro -%}

void {{ class_name }}::InjectHooks() {
do_injects_for(ctors, "Constructors")
do_injects_for(dtor, "Destructors")
do_injects_for(static_fns, "Static functions")
do_injects_for(methods, "Methods")
do_injects_for(virtual_methods, "Virtual methods")
}
