{% macro fn_decl(fn, name, ret_type=fn.ret_type) %}
{% if ret_type %}{{ ret_type }} {% endif %}{{ name }}({{ fn.param_name_types }})
{%- endmacro -%}

{%- macro print_if(encaps, cond) -%}
{%- if cond -%}
{{ encaps }}
{%- endif -%}
{%- endmacro -%}

class {{ class_name }} {
{{ print_if("public:\n", static_vars) -}}
{%- for v in static_vars %}
{%- if v.array_subscript -%} {# Array type #}
    static {{ v.no_extent_type }} (&{{ v.stripped_name }}){{ v.array_subscript }};
{% else -%} {# Non-array type #}
    static {{ v.no_extent_type }}& {{ v.stripped_name }};
{% endif -%}
{%- endfor -%}
{{- print_if("\npublic:\n", member_vars) -}}
{%- for v in member_vars %}
    {{ v.no_extent_type }} {{ v.stripped_name }}{% if v.array_subscript  %}{{ v.array_subscript }}{% endif %} = {};
{% endfor -%}
{{- print_if("public:\n", member_vars) -}}
{%- for fn in ctors %}
    {{ fn_decl(fn, class_name, none) }};
{% endfor -%}
{{ print_if("private:", dtor or ctors) }}
{% if dtor %}
    {{ fn_decl(dtor, "Destructor", class_name + '*') }};
{% endif -%}
{% for fn in ctors %}
    {{ fn_decl(fn, "Constructor", class_name + '*') }};
{% endfor -%}
public:
    static void InjectHooks();

{% for fn in regular_fns %}
    {% if fn.is_static %}
    static {{ fn_decl(fn, fn.name) }};
    {% else %}
    {{ fn_decl(fn, fn.name) }};
    {% endif %}
{% endfor -%}

{% for fn in virtual_fns %}
    {{ fn_decl(fn, fn.name) }} override;
{% endfor -%}

{% if virtual_fns %}{{ '\n' }}private:{{ '\n' }}{% endif %}
{% for fn in virtual_fns %}
    {{ fn_decl(fn, fn.name + '_Reversed') }};{{ '\n' }}
{%- endfor %}
};

VALIDATE_SIZE({{ class_name }}, {{ class_size }});
