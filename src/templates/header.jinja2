{%- from "print_if.jinja2" import print_if with context -%}

{%- macro fn_decl(fn, name, ret_type=fn.ret_type) %}
{% if ret_type %}{{ ret_type }} {% endif %}{{ name }}({{ fn.param_name_types }})
{%- endmacro -%}


class {{ class_name }} {
{% include 'header/static_vars.jinja2' %}
{% include 'header/member_vars.jinja2' %}

public:
    static void InjectHooks();

{% if dtor %}
    {{ fn_decl(dtor, '~' + class_name, none) }};
{% endif -%}

{%- for fn in ctors %}
    {{ fn_decl(fn, class_name, none) }};
{% endfor %}

{% for fn in static_fns %}
    static {{ fn_decl(fn, fn.name) }};
{% endfor %}

{% for fn in methods %}
    {{ fn_decl(fn, fn.name) }};
{% endfor %}

{% for fn in virtual_methods %}
    virtual {{ fn_decl(fn, fn.name) }};
{% endfor -%}

{{ print_if("private:", dtor or ctors) }}
{% include 'header/constructror.jinja2' %}
{% include 'header/destructror.jinja2' %}

{% for fn in virtual_methods %}
    {{ fn_decl(fn, fn.name + '_Reversed') }};
{% endfor %}
};
{%- if class_size and class_size != '0x0' -%}
VALIDATE_SIZE({{ class_name }}, {{ class_size }});
{%- endif -%}
