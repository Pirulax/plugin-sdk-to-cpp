{%- from "print_if.jinja2" import print_if with context -%}
{% from "function_def.jinja2" import function_def with context -%}

#pragma once

{# Include base classes #}
{% for type in types_to_include %}
#include "{{ type | removeprefix('C') }}.h"
{% endfor %}

{# Forward declare pointer member variables #}
{% for type in types_to_fwd_declare %}
class {{ type }};
{% endfor %}

{# Macros #}
{# Function declaration (Eg.: Function with no body) #}
{%- macro fn_decl(fn, name, ret_type=fn.ret_type) %}
{% if ret_type %}{{ ret_type }} {% endif %}{{ name }}({{ fn.param_name_types }})
{%- endmacro %}

class {{ class_name }} : public {{ bases | join(", ") }} {
{# Static variables #}
{% if USE_STATIC_INLINE %} {# Declaration + Definition using `static inline` #}
    {%- include 'header/static_inline_vars.jinja2' %}
{%- else -%} {# Just declarations #}
    {%- include 'header/static_vars.jinja2' %}
{%- endif -%}
{% include 'header/member_vars.jinja2' %}

public:
    static void InjectHooks();

{% for fn in functions[FunctionType.CTOR] %}
    {{ fn_decl(fn, class_name, none) }};
{% endfor %}
{% if functions[FunctionType.DTOR] %}
    {{ fn_decl(functions[FunctionType.DTOR], '~' + class_name, none) }};
{% endif -%}

{% for fn in functions[FunctionType.STATIC] %}
    static {{ fn_decl(fn, fn.name) }};
{% endfor %}

{% for fn in functions[FunctionType.METHOD] %}
    {{ fn_decl(fn, fn.name) }};
{% endfor %}

{% for fn in functions[FunctionType.VIRTUAL] %}
    virtual {{ fn_decl(fn, fn.name) }};
{% endfor %}

private: // Wrappers for hooks

{% include 'header/constructror.jinja2' %}
{% include 'header/destructror.jinja2' %}

{# Virtual method _Reversed wrappers (Which just redirect to this class's virtual function) #}
{% if WRAP_VIRTUALS -%}
{% for fn in functions[FunctionType.VIRTUAL] %}
    {{ fn.ret_type }} {{ fn.name + "_Reversed"}}({{ fn.param_name_types }}) { return {{ class_name }}::{{ fn.name }}({{ fn.param_names }}); }
{% endfor -%}
{% endif %}
};{# End of class #}

{% if class_size %}
VALIDATE_SIZE({{ class_name }}, {{ class_size | int(class_size, 16) }});
{% endif %}
