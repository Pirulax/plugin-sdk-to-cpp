#include "StdInc.h"
#include "{{ class_name }}.h"

{% from "print_if.jinja2" import print_if_array_not_empty with context -%}

{# Macros #}
{%- macro function_def(fn, name, ret_type=fn.ret_type) -%}
// {{ fn.address }}
{% if ret_type %}{{ ret_type }} {% endif %}{{ class_name }}::{{ name }}({{ fn.param_name_types }}) {
    {% if caller -%}
        {{- caller() -}}
    {%- endif -%}
}
{% endmacro -%}

{% macro function_def_empty_body(fn, name) -%}
    {%- call function_def(fn, fn.name) -%}{%- endcall -%}
{%- endmacro -%}

{%- macro function_def_plugin(fn, name) -%}
    {%- call function_def(fn, name) %}
    {{ fn.plugin_call_src | indent(4) }};
    {% endcall -%}
{%- endmacro -%}

{% include "source/static_vars.jinja2" %}

{% if not virtual_methods %}
{% include "source/inject_hooks.jinja2" %}
{% endif %}

{# Constructors #}
{% for fn in ctors -%}
    {% include "source/constructror.jinja2" %}
{% endfor %}

{# Destructor if any #}
{% if dtor %}
    {% include "source/destructror.jinja2" %}
{% endif %}

{# Static functions #}
{{ print_if_array_not_empty("// Static functions", static_fns) }}
{% for fn in static_fns %}
    {{- function_def_plugin(fn, fn.name) }}
{% endfor %}

{# Methods #}
{{ print_if_array_not_empty("// Methods", methods) }}
{% for fn in methods %}
    {{- function_def_plugin(fn, fn.name) }}
{% endfor %}

{# Virtual methods #}
{{ print_if_array_not_empty("// Virtual methods", virtual_methods) }}
{%- for fn in virtual_methods -%}
    {# Function body for wrapped virtual method #}
    {% call function_def(fn, fn.name) %}
    {{ fn.name }}_Reversed({{ fn.param_names }});
    {% endcall %}
{% endfor %}

{% if virtual_methods %}
{% include "source/inject_hooks.jinja2" %}
{% endif %}

{# _Reversed wrapper for above virtual method #}
{%- for fn in virtual_methods -%}
    {% call function_def(fn, fn.name  + "_Reversed") %}
    {{ class_name }}::{{ fn.name }}({{ fn.param_names }});
    {% endcall %}

{% endfor %}